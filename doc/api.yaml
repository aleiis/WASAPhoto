openapi: 3.0.3
info:
  title: WASAPhoto API
  description: |
    The WASAPhoto API interacts with a social image platform. Users can view a stream of photos in reverse chronological order, including upload timestamps, likes, and comments. This stream consists of images from users they follow.

    Users can like and comment on images, with only comment authors able to delete their comments. Blocking users restricts their access to the blocker's information, with the option to unblock at any time.

    Each user has a profile displaying their photos, total uploads, followers, and following. Users can modify usernames, upload/delete photos, and follow/unfollow others.

    Deleting an image removes associated likes and comments.

    Users can search for profiles by username and log in using only their username.
  contact:
    name: Alejandro Ibáñez Pastrana
    email: ibanezpastrana.2116832@studenti.uniroma1.it
    url: https://github.com/aleiis
  version: 1.0.0
servers: [ ]
tags:
  - name: Liveness
    description: Resource used to identified the liveness of the service
  - name: Login
    description: Logs in the user
  - name: User
    description: User operations
  - name: Photos
    description: Photo operations
  - name: Following
    description: Following operations
  - name: Banning
    description: Banning operations
  - name: Likes
    description: Like operations
  - name: Comments
    description: Comment operations
paths:
  /liveness:
    summary: Resource used to identified the liveness of the service
    get:
      tags: [ "Liveness" ]
      summary: Check the liveness of the service
      description: |
        If the service is alive it returns HTTP Status 200, if not it returns HTTP Status Internal Server Error 500
      operationId: liveness
      responses:
        '200':
          description: Service is alive
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InfoMessage'
        '500':
          description: Service is not available
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /session:
    post:
      tags: [ "Login" ]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created, and an identifier is returned. If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: User details
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/Username'
        required: true
      responses:
        '201':
          description: User log-in action successful. Token returned.
          content:
            application/json:
              schema:
                description: Token for the user. It is used to authenticate the user in the following requests.
                type: string
                example: "432"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/:
    summary: Collection of users
    get:
      tags: [ "User" ]
      summary: |
        Retrieve the user_id and username of the user that matches the given query.
      description: |
        Search for a user by username. If a the user exists it will return the user resource, this means its ID and its username.
        If the user does not exist, it will return 404 Not Found.
      operationId: getUserByUsername
      security:
        - bearerAuth: [ ]
      parameters:
        - name: username
          in: query
          description: Username of the user
          required: true
          schema:
            $ref: '#/components/schemas/Username'
          example: "Maria"
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}:
    summary: User identified by a unique ID
    parameters:
      - $ref: '#/components/parameters/user_id'
    put:
      tags: [ "User" ]
      summary: Modifies the username of a user
      description: |
        Users can change their username. The new username must be unique.
      operationId: setMyUserName
      security:
        - bearerAuth: [ ]
      requestBody:
        description: New representation of the user resource.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Username changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Username already exists
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/profile:
    summary: User's profile
    parameters:
      - $ref: '#/components/parameters/user_id'
    get:
      tags: [ "User" ]
      summary: Retrieves the user's profile
      description: |
        The user profile displays the user's photos, total uploads, followers, and following.
      operationId: getUserProfile
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/BannedByUserError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/stream:
    summary: User's stream
    parameters:
      - $ref: '#/components/parameters/user_id'
    get:
      tags: [ "User" ]
      summary: Retrieves the user's stream
      description: |
        The user's stream consists of images from users they follow. The stream is ordered in reverse chronological order.
      operationId: getMyStream
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Stream retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/photos/:
    summary: User's photos
    parameters:
      - $ref: '#/components/parameters/user_id'
    post:
      tags: [ "Photos" ]
      summary: Uploads a photo for the user
      description: |
        The user uploads a photo. The photo is stored in the user's profile.
      operationId: uploadPhoto
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Photo to upload
        content:
          image/png:
            schema:
              description: PNG image
              type: string
              format: binary
              minLength: 1
              maxLength: 1048576
          image/jpeg:
            schema:
              description: JPEG image
              type: string
              format: binary
              minLength: 1
              maxLength: 1048576
        required: true
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalPhotoId'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/photos/{photo_id}:
    summary: User's photo identified by a unique ID
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'
    delete:
      tags: [ "Photos" ]
      summary: Deletes a photo
      description: |
        The user deletes a photo. The photo is removed from the user's profile.
      operationId: deletePhoto
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Photo deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/photos/{photo_id}/bin:
    summary: Binary data of a user's photo identified by a unique ID
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'
    get:
      tags: [ "Photos" ]
      summary: Get the binary information (blob) of a photo
      description: |
        The user can retrieve the binary information of a photo. The photo is identified by the user's unique ID and the photo's unique ID.
        The binary information may be in PNG or JPEG format.
      operationId: getPhoto
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Image retrieved successfully
          content:
            image/png:
              schema:
                description: PNG image
                type: string
                format: binary
                minLength: 1
                maxLength: 1048576
            image/jpeg:
              schema:
                description: JPEG image
                type: string
                format: binary
                minLength: 1
                maxLength: 1048576
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/BannedByUserError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/follows/:
    summary: Collection of users followed by the user
    parameters:
      - $ref: '#/components/parameters/user_id'
    post:
      tags: [ "Following" ]
      summary: Create a new follow
      description: |
        Lets the user follow another user. The follow operation will fail if the user to follow has banned the first user.
      operationId: followUser
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Representation of the follow resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
        required: true
      responses:
        '201':
          description: User followed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/BannedByUserError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/follows/{followed_id}:
    summary: User follows another user
    parameters:
      - $ref: '#/components/parameters/user_id'
      - name: followed_id
        in: path
        description: Identifier of the followed user
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        example: 0
    delete:
      tags: [ "Following" ]
      summary: Deletes a follow
      description: |
        Lets the user unfollow another user.
      operationId: unfollowUser
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: User unfollowed successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags: [ "Following" ]
      summary: Lets a user check if it follows another user
      description: |
        If the user follows the other user, the API will return 200 OK as the status code and the representation of the follow
        resource. If not, it will return 404 Not Found.
      operationId: checkFollow
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Follow exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/bans/:
    summary: Collection of banned users by the user identified by the unique ID
    parameters:
      - $ref: '#/components/parameters/user_id'
    post:
      tags: [ "Banning" ]
      summary: Create a new ban
      description: |
        Lets the user ban another user. If the banned user is following the first user then the follow will be cancelled.
      operationId: banUser
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Representation of the ban resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ban'
        required: true
      responses:
        '201':
          description: User banned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ban'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/bans/{banned_id}:
    summary: User bans another user
    description: |
      The user identified by user_id bans another user identified by bannedID.
    parameters:
      - $ref: '#/components/parameters/user_id'
      - name: banned_id
        in: path
        description: Identifier of the banned user
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        example: 0
    delete:
      tags: [ "Banning" ]
      summary: Deletes a ban
      description: |
        Lets the user unban another user.
      operationId: unbanUser
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: User unbanned successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags: [ "Banning" ]
      summary: Lets a user check if it has banned another user
      description: |
        If the user has banned the other user, the API will return 200 OK as the status code and the representation of the ban resource.
        If not, it will return 404 Not Found.
      operationId: checkBan
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Ban exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ban'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/photos/{photo_id}/likes/:
    summary: Collection of likes for a photo
    description: |
      The user is identified by the unique ID and each photo is
      identified by a unique ID per user.
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'
    post:
      tags: [ "Likes" ]
      summary: Creates a new like
      description: |
        Lets the user like a photo.
      operationId: likePhoto
      security:
        - bearerAuth: [ ]
      requestBody:
        description: ID of the user liking the photo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
      responses:
        '201':
          description: Photo liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/BannedByUserError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/photos/{photo_id}/likes/{liker_id}:
    summary: User likes a photo identified by a unique ID per user
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'
      - name: liker_id
        in: path
        description: Identifier of the user liking the photo
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        example: 0
    delete:
      tags: [ "Likes" ]
      summary: Deletes a like
      description: |
        Lets the user unlike a photo.
      operationId: unlikePhoto
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Photo unliked successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags: [ "Likes" ]
      summary: Lets a user check if it has liked a photo
      description: |
        If the user has liked the photo the API will return 200 OK as the status code. If not, it will return 404 Not Found.
      operationId: checkLikeStatus
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Like exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/photos/{photo_id}/comments/:
    summary: Collection of the comments made on a photo
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'
    post:
      tags: [ "Comments" ]
      summary: Creates a new comment
      description: |
        Lets the user comment on a photo.
      operationId: commentPhoto
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Owner and content of the comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '201':
          description: Comment posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags: [ "Comments" ]
      summary: Get all the comments of a photo
      description: |
        All comments of the photo are returned in an array, ordered in the same sequence as in the database. It does not return the ID of the owner of each comment; instead, it returns the username of each user.
      operationId: getComments
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Photo comments retrieved successfully
          content:
            application/json:
              schema:
                description: Comments of the photo
                type: object
                properties:
                  comments:
                    description: Array of comments in the photo
                    type: array
                    minItems: 0
                    maxItems: 100000
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/BannedByUserError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/photos/{photo_id}/comments/{comment_id}:
    summary: |
      Comment made by a user on a photo identified by photo_id (unique per user)
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'
      - name: comment_id
        in: path
        description: |
          Identifier of the comment. It's the index of the comment in the database, which is independent for each photo. The index starts at 0.
        required: true
        schema:
          type: integer
          format: int64
        example: 0
    delete:
      tags: [ "Comments" ]
      summary: Deletes a comment
      description: |
        Lets the user delete a comment.
      operationId: uncommentPhoto
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Comment deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    InfoMessage:
      title: InfoMessage
      description: Information message
      type: string
      example: "This is an info message."
    ErrorMessage:
      title: ErrorMessage
      description: Error message
      type: string
      example: "Internal Server Error"
    Date:
      title: Date
      description: Date in ISO 8601 format
      type: string
      format: date-time
    UserId:
      title: UserId
      description: Unique identifier of a user
      type: integer
      format: int64
      example: 0
    Username:
      title: Username
      description: Username of a user. Must be unique.
      type: string
      example: "Maria"
      minLength: 3
      maxLength: 16
      pattern: ^[a-zA-Z0-9]*$
    User:
      title: User
      description: User resource
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        username:
          $ref: '#/components/schemas/Username'
    UserPhotoId:
      title: UserPhotoId
      description: Identifier of a photo unique per user. Each user has its independent set of photo identifiers.
      type: integer
      format: int64
      example: 0
    GlobalPhotoId:
      title: GlobalPhotoId
      description: Global identifier of a photo. A photo is identified by the user's unique ID and the photo's unique ID per user.
      type: object
      properties:
        owner:
          $ref: '#/components/schemas/UserId'
        id:
          $ref: '#/components/schemas/UserPhotoId'
      example:
        owner: 13
        id: 4
    Photo:
      title: Photo
      description: General information of a photo
      type: object
      properties:
        owner:
          $ref: '#/components/schemas/User'
        id:
          $ref: '#/components/schemas/UserPhotoId'
        date:
          $ref: '#/components/schemas/Date'
        likes:
          description: Number of likes of the photo
          type: integer
          format: int64
          minimum: 0
        comments:
          description: Number of comments of the photo
          type: integer
          format: int64
          minimum: 0
    Follow:
      title: Follow
      description: Follow resource
      type: object
      properties:
        follower:
          $ref: '#/components/schemas/UserId'
        followed:
          $ref: '#/components/schemas/UserId'
    Ban:
      title: Ban
      description: Ban resource
      type: object
      properties:
        ban_issuer:
          $ref: '#/components/schemas/UserId'
        banned_user:
          $ref: '#/components/schemas/UserId'
    Like:
      title: Like
      description: Like resource
      type: object
      properties:
        liker:
          $ref: '#/components/schemas/UserId'
        photo:
          $ref: '#/components/schemas/GlobalPhotoId'
    PhotoCommentId:
      title: PhotoCommentId
      description: Identifier of a comment unique per photo. Each photo has its independent set of comment identifiers.
      type: integer
      format: int64
      example: 0
    Comment:
      title: Comment
      description: Comment resource
      type: object
      properties:
        photo:
          $ref: '#/components/schemas/GlobalPhotoId'
        id:
          $ref: '#/components/schemas/PhotoCommentId'
        owner:
          $ref: '#/components/schemas/UserId'
        content:
          description: Content of the comment
          type: string
          minLength: 1
          maxLength: 128
          pattern: .*
          example: "Hey!"
    Profile:
        title: Profile
        description: Profile of a user
        type: object
        properties:
          owner:
            $ref: '#/components/schemas/User'
          photos:
            description: Array of photos in the user's profile
            type: array
            minItems: 0
            maxItems: 100000
            items:
              $ref: '#/components/schemas/Photo'
          uploads:
            description: Number of photos uploaded by the user
            type: integer
            format: int64
            minimum: 0
            example: 0
          followers:
            description: Number of followers of the user
            type: integer
            format: int64
            minimum: 0
            example: 0
          following:
            description: Number of users followed by the user
            type: integer
            format: int64
            minimum: 0
            example: 0
    Stream:
      title: Stream
      description: User stream in reverse chronological order
      type: object
      properties:
        stream:
          description: Array of photos in the user's stream
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: '#/components/schemas/Photo'

  parameters:
    user_id:
      name: user_id
      in: path
      description: User identifier
      required: true
      schema:
        $ref: '#/components/schemas/UserId'
      example: 0
    photo_id:
      name: photo_id
      in: path
      description: Photo identifier unique per user
      required: true
      schema:
        $ref: '#/components/schemas/UserPhotoId'
      example: 0
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    BadRequestError:
      description: Bad Request
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    BannedByUserError:
      description: |
        The requesting user may be banned and cannot access the requested resource.
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    NotFoundError:
      description: Resource not found
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    InternalServerError:
      description: Internal Server Error
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
