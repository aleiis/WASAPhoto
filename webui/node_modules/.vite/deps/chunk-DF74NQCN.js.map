{
  "version": 3,
  "sources": ["../../shimmer/index.js", "../../@opentelemetry/api-logs/src/types/LogRecord.ts", "../../@opentelemetry/api-logs/src/NoopLogger.ts", "../../@opentelemetry/api-logs/src/NoopLoggerProvider.ts", "../../@opentelemetry/api-logs/src/ProxyLogger.ts", "../../@opentelemetry/api-logs/src/ProxyLoggerProvider.ts", "../../@opentelemetry/api-logs/src/platform/browser/globalThis.ts", "../../@opentelemetry/api-logs/src/internal/global-utils.ts", "../../@opentelemetry/api-logs/src/api/logs.ts", "../../@opentelemetry/api-logs/src/index.ts", "../../@opentelemetry/instrumentation/src/autoLoaderUtils.ts", "../../@opentelemetry/instrumentation/src/autoLoader.ts", "../../@opentelemetry/instrumentation/src/instrumentation.ts", "../../@opentelemetry/instrumentation/src/platform/browser/instrumentation.ts", "../../@opentelemetry/instrumentation/src/platform/browser/noop-normalize.ts", "../../@opentelemetry/instrumentation/src/instrumentationNodeModuleDefinition.ts", "../../@opentelemetry/instrumentation/src/instrumentationNodeModuleFile.ts", "../../@opentelemetry/instrumentation/src/utils.ts"],
  "sourcesContent": ["'use strict'\n\nfunction isFunction (funktion) {\n  return typeof funktion === 'function'\n}\n\n// Default to complaining loudly when things don't go according to plan.\nvar logger = console.error.bind(console)\n\n// Sets a property on an object, preserving its enumerability.\n// This function assumes that the property is already writable.\nfunction defineProperty (obj, name, value) {\n  var enumerable = !!obj[name] && obj.propertyIsEnumerable(name)\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: enumerable,\n    writable: true,\n    value: value\n  })\n}\n\n// Keep initialization idempotent.\nfunction shimmer (options) {\n  if (options && options.logger) {\n    if (!isFunction(options.logger)) logger(\"new logger isn't a function, not replacing\")\n    else logger = options.logger\n  }\n}\n\nfunction wrap (nodule, name, wrapper) {\n  if (!nodule || !nodule[name]) {\n    logger('no original function ' + name + ' to wrap')\n    return\n  }\n\n  if (!wrapper) {\n    logger('no wrapper function')\n    logger((new Error()).stack)\n    return\n  }\n\n  if (!isFunction(nodule[name]) || !isFunction(wrapper)) {\n    logger('original object and wrapper must be functions')\n    return\n  }\n\n  var original = nodule[name]\n  var wrapped = wrapper(original, name)\n\n  defineProperty(wrapped, '__original', original)\n  defineProperty(wrapped, '__unwrap', function () {\n    if (nodule[name] === wrapped) defineProperty(nodule, name, original)\n  })\n  defineProperty(wrapped, '__wrapped', true)\n\n  defineProperty(nodule, name, wrapped)\n  return wrapped\n}\n\nfunction massWrap (nodules, names, wrapper) {\n  if (!nodules) {\n    logger('must provide one or more modules to patch')\n    logger((new Error()).stack)\n    return\n  } else if (!Array.isArray(nodules)) {\n    nodules = [nodules]\n  }\n\n  if (!(names && Array.isArray(names))) {\n    logger('must provide one or more functions to wrap on modules')\n    return\n  }\n\n  nodules.forEach(function (nodule) {\n    names.forEach(function (name) {\n      wrap(nodule, name, wrapper)\n    })\n  })\n}\n\nfunction unwrap (nodule, name) {\n  if (!nodule || !nodule[name]) {\n    logger('no function to unwrap.')\n    logger((new Error()).stack)\n    return\n  }\n\n  if (!nodule[name].__unwrap) {\n    logger('no original to unwrap to -- has ' + name + ' already been unwrapped?')\n  } else {\n    return nodule[name].__unwrap()\n  }\n}\n\nfunction massUnwrap (nodules, names) {\n  if (!nodules) {\n    logger('must provide one or more modules to patch')\n    logger((new Error()).stack)\n    return\n  } else if (!Array.isArray(nodules)) {\n    nodules = [nodules]\n  }\n\n  if (!(names && Array.isArray(names))) {\n    logger('must provide one or more functions to unwrap on modules')\n    return\n  }\n\n  nodules.forEach(function (nodule) {\n    names.forEach(function (name) {\n      unwrap(nodule, name)\n    })\n  })\n}\n\nshimmer.wrap = wrap\nshimmer.massWrap = massWrap\nshimmer.unwrap = unwrap\nshimmer.massUnwrap = massUnwrap\n\nmodule.exports = shimmer\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, TimeInput } from '@opentelemetry/api';\nimport { AnyValue, AnyValueMap } from './AnyValue';\n\nexport type LogBody = AnyValue;\nexport type LogAttributes = AnyValueMap;\n\nexport enum SeverityNumber {\n  UNSPECIFIED = 0,\n  TRACE = 1,\n  TRACE2 = 2,\n  TRACE3 = 3,\n  TRACE4 = 4,\n  DEBUG = 5,\n  DEBUG2 = 6,\n  DEBUG3 = 7,\n  DEBUG4 = 8,\n  INFO = 9,\n  INFO2 = 10,\n  INFO3 = 11,\n  INFO4 = 12,\n  WARN = 13,\n  WARN2 = 14,\n  WARN3 = 15,\n  WARN4 = 16,\n  ERROR = 17,\n  ERROR2 = 18,\n  ERROR3 = 19,\n  ERROR4 = 20,\n  FATAL = 21,\n  FATAL2 = 22,\n  FATAL3 = 23,\n  FATAL4 = 24,\n}\n\nexport interface LogRecord {\n  /**\n   * The time when the log record occurred as UNIX Epoch time in nanoseconds.\n   */\n  timestamp?: TimeInput;\n\n  /**\n   * Time when the event was observed by the collection system.\n   */\n  observedTimestamp?: TimeInput;\n\n  /**\n   * Numerical value of the severity.\n   */\n  severityNumber?: SeverityNumber;\n\n  /**\n   * The severity text.\n   */\n  severityText?: string;\n\n  /**\n   * A value containing the body of the log record.\n   */\n  body?: LogBody;\n\n  /**\n   * Attributes that define the log record.\n   */\n  attributes?: LogAttributes;\n\n  /**\n   * The Context associated with the LogRecord.\n   */\n  context?: Context;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from './types/Logger';\nimport { LogRecord } from './types/LogRecord';\n\nexport class NoopLogger implements Logger {\n  emit(_logRecord: LogRecord): void {}\n}\n\nexport const NOOP_LOGGER = new NoopLogger();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerProvider } from './types/LoggerProvider';\nimport { Logger } from './types/Logger';\nimport { LoggerOptions } from './types/LoggerOptions';\nimport { NoopLogger } from './NoopLogger';\n\nexport class NoopLoggerProvider implements LoggerProvider {\n  getLogger(\n    _name: string,\n    _version?: string | undefined,\n    _options?: LoggerOptions | undefined\n  ): Logger {\n    return new NoopLogger();\n  }\n}\n\nexport const NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NOOP_LOGGER } from './NoopLogger';\nimport { Logger } from './types/Logger';\nimport { LoggerOptions } from './types/LoggerOptions';\nimport { LogRecord } from './types/LogRecord';\n\nexport class ProxyLogger implements Logger {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Logger;\n\n  constructor(\n    private _provider: LoggerDelegator,\n    public readonly name: string,\n    public readonly version?: string | undefined,\n    public readonly options?: LoggerOptions | undefined\n  ) {}\n\n  /**\n   * Emit a log record. This method should only be used by log appenders.\n   *\n   * @param logRecord\n   */\n  emit(logRecord: LogRecord): void {\n    this._getLogger().emit(logRecord);\n  }\n\n  /**\n   * Try to get a logger from the proxy logger provider.\n   * If the proxy logger provider has no delegate, return a noop logger.\n   */\n  private _getLogger() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n    const logger = this._provider.getDelegateLogger(\n      this.name,\n      this.version,\n      this.options\n    );\n    if (!logger) {\n      return NOOP_LOGGER;\n    }\n    this._delegate = logger;\n    return this._delegate;\n  }\n}\n\nexport interface LoggerDelegator {\n  getDelegateLogger(\n    name: string,\n    version?: string,\n    options?: LoggerOptions\n  ): Logger | undefined;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerProvider } from './types/LoggerProvider';\nimport { Logger } from './types/Logger';\nimport { LoggerOptions } from './types/LoggerOptions';\nimport { NOOP_LOGGER_PROVIDER } from './NoopLoggerProvider';\nimport { ProxyLogger } from './ProxyLogger';\n\nexport class ProxyLoggerProvider implements LoggerProvider {\n  private _delegate?: LoggerProvider;\n\n  getLogger(\n    name: string,\n    version?: string | undefined,\n    options?: LoggerOptions | undefined\n  ): Logger {\n    return (\n      this.getDelegateLogger(name, version, options) ??\n      new ProxyLogger(this, name, version, options)\n    );\n  }\n\n  getDelegate(): LoggerProvider {\n    return this._delegate ?? NOOP_LOGGER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate logger provider\n   */\n  setDelegate(delegate: LoggerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateLogger(\n    name: string,\n    version?: string | undefined,\n    options?: LoggerOptions | undefined\n  ): Logger | undefined {\n    return this._delegate?.getLogger(name, version, options);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/api and\n// @opentelemetry/core too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n      ? self\n      : typeof window === 'object'\n        ? window\n        : typeof global === 'object'\n          ? global\n          : ({} as typeof globalThis);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerProvider } from '../types/LoggerProvider';\nimport { _globalThis } from '../platform';\n\nexport const GLOBAL_LOGS_API_KEY = Symbol.for('io.opentelemetry.js.api.logs');\n\ntype Get<T> = (version: number) => T;\ntype OtelGlobal = Partial<{\n  [GLOBAL_LOGS_API_KEY]: Get<LoggerProvider>;\n}>;\n\nexport const _global = _globalThis as OtelGlobal;\n\n/**\n * Make a function which accepts a version integer and returns the instance of an API if the version\n * is compatible, or a fallback version (usually NOOP) if it is not.\n *\n * @param requiredVersion Backwards compatibility version which is required to return the instance\n * @param instance Instance which should be returned if the required version is compatible\n * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible\n */\nexport function makeGetter<T>(\n  requiredVersion: number,\n  instance: T,\n  fallback: T\n): Get<T> {\n  return (version: number): T =>\n    version === requiredVersion ? instance : fallback;\n}\n\n/**\n * A number which should be incremented each time a backwards incompatible\n * change is made to the API. This number is used when an API package\n * attempts to access the global API to ensure it is getting a compatible\n * version. If the global API is not compatible with the API package\n * attempting to get it, a NOOP API implementation will be returned.\n */\nexport const API_BACKWARDS_COMPATIBILITY_VERSION = 1;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  API_BACKWARDS_COMPATIBILITY_VERSION,\n  GLOBAL_LOGS_API_KEY,\n  _global,\n  makeGetter,\n} from '../internal/global-utils';\nimport { LoggerProvider } from '../types/LoggerProvider';\nimport { NOOP_LOGGER_PROVIDER } from '../NoopLoggerProvider';\nimport { Logger } from '../types/Logger';\nimport { LoggerOptions } from '../types/LoggerOptions';\nimport { ProxyLoggerProvider } from '../ProxyLoggerProvider';\n\nexport class LogsAPI {\n  private static _instance?: LogsAPI;\n\n  private _proxyLoggerProvider = new ProxyLoggerProvider();\n\n  private constructor() {}\n\n  public static getInstance(): LogsAPI {\n    if (!this._instance) {\n      this._instance = new LogsAPI();\n    }\n\n    return this._instance;\n  }\n\n  public setGlobalLoggerProvider(provider: LoggerProvider): LoggerProvider {\n    if (_global[GLOBAL_LOGS_API_KEY]) {\n      return this.getLoggerProvider();\n    }\n\n    _global[GLOBAL_LOGS_API_KEY] = makeGetter<LoggerProvider>(\n      API_BACKWARDS_COMPATIBILITY_VERSION,\n      provider,\n      NOOP_LOGGER_PROVIDER\n    );\n    this._proxyLoggerProvider.setDelegate(provider);\n\n    return provider;\n  }\n\n  /**\n   * Returns the global logger provider.\n   *\n   * @returns LoggerProvider\n   */\n  public getLoggerProvider(): LoggerProvider {\n    return (\n      _global[GLOBAL_LOGS_API_KEY]?.(API_BACKWARDS_COMPATIBILITY_VERSION) ??\n      this._proxyLoggerProvider\n    );\n  }\n\n  /**\n   * Returns a logger from the global logger provider.\n   *\n   * @returns Logger\n   */\n  public getLogger(\n    name: string,\n    version?: string,\n    options?: LoggerOptions\n  ): Logger {\n    return this.getLoggerProvider().getLogger(name, version, options);\n  }\n\n  /** Remove the global logger provider */\n  public disable(): void {\n    delete _global[GLOBAL_LOGS_API_KEY];\n    this._proxyLoggerProvider = new ProxyLoggerProvider();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { Logger } from './types/Logger';\nexport { LoggerProvider } from './types/LoggerProvider';\nexport {\n  LogAttributes,\n  LogBody,\n  LogRecord,\n  SeverityNumber,\n} from './types/LogRecord';\nexport { LoggerOptions } from './types/LoggerOptions';\nexport { AnyValue, AnyValueMap } from './types/AnyValue';\nexport { NOOP_LOGGER, NoopLogger } from './NoopLogger';\nexport { NOOP_LOGGER_PROVIDER, NoopLoggerProvider } from './NoopLoggerProvider';\nexport { ProxyLogger } from './ProxyLogger';\nexport { ProxyLoggerProvider } from './ProxyLoggerProvider';\n\nimport { LogsAPI } from './api/logs';\nexport const logs = LogsAPI.getInstance();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TracerProvider, MeterProvider } from '@opentelemetry/api';\nimport { Instrumentation } from './types';\nimport { LoggerProvider } from '@opentelemetry/api-logs';\n\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(\n  instrumentations: Instrumentation[],\n  tracerProvider?: TracerProvider,\n  meterProvider?: MeterProvider,\n  loggerProvider?: LoggerProvider\n): void {\n  for (let i = 0, j = instrumentations.length; i < j; i++) {\n    const instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    if (loggerProvider && instrumentation.setLoggerProvider) {\n      instrumentation.setLoggerProvider(loggerProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(\n  instrumentations: Instrumentation[]\n): void {\n  instrumentations.forEach(instrumentation => instrumentation.disable());\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trace, metrics } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport {\n  disableInstrumentations,\n  enableInstrumentations,\n} from './autoLoaderUtils';\nimport { AutoLoaderOptions } from './types_internal';\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(\n  options: AutoLoaderOptions\n): () => void {\n  const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  const meterProvider = options.meterProvider || metrics.getMeterProvider();\n  const loggerProvider = options.loggerProvider || logs.getLoggerProvider();\n  const instrumentations = options.instrumentations?.flat() ?? [];\n\n  enableInstrumentations(\n    instrumentations,\n    tracerProvider,\n    meterProvider,\n    loggerProvider\n  );\n\n  return () => {\n    disableInstrumentations(instrumentations);\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  DiagLogger,\n  metrics,\n  Meter,\n  MeterProvider,\n  trace,\n  Tracer,\n  TracerProvider,\n  Span,\n} from '@opentelemetry/api';\nimport { Logger, LoggerProvider, logs } from '@opentelemetry/api-logs';\nimport * as shimmer from 'shimmer';\nimport {\n  InstrumentationModuleDefinition,\n  Instrumentation,\n  InstrumentationConfig,\n  SpanCustomizationHook,\n} from './types';\n\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nexport abstract class InstrumentationAbstract<\n  ConfigType extends InstrumentationConfig = InstrumentationConfig,\n> implements Instrumentation<ConfigType>\n{\n  protected _config: ConfigType = {} as ConfigType;\n\n  private _tracer: Tracer;\n  private _meter: Meter;\n  private _logger: Logger;\n  protected _diag: DiagLogger;\n\n  constructor(\n    public readonly instrumentationName: string,\n    public readonly instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    this.setConfig(config);\n\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName,\n    });\n\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n\n  /* Api to wrap instrumented method */\n  protected _wrap = shimmer.wrap;\n  /* Api to unwrap instrumented methods */\n  protected _unwrap = shimmer.unwrap;\n  /* Api to mass wrap instrumented method */\n  protected _massWrap = shimmer.massWrap;\n  /* Api to mass unwrap instrumented methods */\n  protected _massUnwrap = shimmer.massUnwrap;\n\n  /* Returns meter */\n  protected get meter(): Meter {\n    return this._meter;\n  }\n\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  public setMeterProvider(meterProvider: MeterProvider): void {\n    this._meter = meterProvider.getMeter(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n\n    this._updateMetricInstruments();\n  }\n\n  /* Returns logger */\n  protected get logger(): Logger {\n    return this._logger;\n  }\n\n  /**\n   * Sets LoggerProvider to this plugin\n   * @param loggerProvider\n   */\n  public setLoggerProvider(loggerProvider: LoggerProvider): void {\n    this._logger = loggerProvider.getLogger(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /**\n   * @experimental\n   *\n   * Get module definitions defined by {@link init}.\n   * This can be used for experimental compile-time instrumentation.\n   *\n   * @returns an array of {@link InstrumentationModuleDefinition}\n   */\n  public getModuleDefinitions(): InstrumentationModuleDefinition[] {\n    const initResult = this.init() ?? [];\n    if (!Array.isArray(initResult)) {\n      return [initResult];\n    }\n\n    return initResult;\n  }\n\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  protected _updateMetricInstruments(): void {\n    return;\n  }\n\n  /* Returns InstrumentationConfig */\n  public getConfig(): ConfigType {\n    return this._config;\n  }\n\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param config\n   */\n  public setConfig(config: ConfigType): void {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = {\n      enabled: true,\n      ...config,\n    };\n  }\n\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  public setTracerProvider(tracerProvider: TracerProvider): void {\n    this._tracer = tracerProvider.getTracer(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /* Returns tracer */\n  protected get tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /* Enable plugin */\n  public abstract enable(): void;\n\n  /* Disable plugin */\n  public abstract disable(): void;\n\n  /**\n   * Init method in which plugin should define _modules and patches for\n   * methods.\n   */\n  protected abstract init():\n    | InstrumentationModuleDefinition\n    | InstrumentationModuleDefinition[]\n    | void;\n\n  /**\n   * Execute span customization hook, if configured, and log any errors.\n   * Any semantics of the trigger and info are defined by the specific instrumentation.\n   * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n   * @param triggerName The name of the trigger for executing the hook for logging purposes\n   * @param span The span to which the hook should be applied\n   * @param info The info object to be passed to the hook, with useful data the hook may use\n   */\n  protected _runSpanCustomizationHook<SpanCustomizationInfoType>(\n    hookHandler: SpanCustomizationHook<SpanCustomizationInfoType> | undefined,\n    triggerName: string,\n    span: Span,\n    info: SpanCustomizationInfoType\n  ) {\n    if (!hookHandler) {\n      return;\n    }\n\n    try {\n      hookHandler(span, info);\n    } catch (e) {\n      this._diag.error(\n        `Error running span customization hook due to exception in handler`,\n        { triggerName },\n        e\n      );\n    }\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationAbstract } from '../../instrumentation';\nimport * as types from '../../types';\nimport { InstrumentationConfig } from '../../types';\n\n/**\n * Base abstract class for instrumenting web plugins\n */\nexport abstract class InstrumentationBase<\n    ConfigType extends InstrumentationConfig = InstrumentationConfig,\n  >\n  extends InstrumentationAbstract<ConfigType>\n  implements types.Instrumentation<ConfigType>\n{\n  constructor(\n    instrumentationName: string,\n    instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    super(instrumentationName, instrumentationVersion, config);\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\n\n/**\n * Placeholder normalize function to replace the node variant in browser runtimes,\n * this should never be called and will perform a no-op and warn if it is called regardless.\n *\n * This is a workaround to fix https://github.com/open-telemetry/opentelemetry-js/issues/4373 until the instrumentation\n * package can be made node-only.\n *\n * @param path input path\n * @return unmodified path\n * @internal\n */\nexport function normalize(path: string): string {\n  diag.warn(\n    'Path normalization is not implemented for this platform. To silence this warning, ensure no node-specific instrumentations are loaded, and node-specific types (e.g. InstrumentationNodeModuleFile), are not used in a browser context)'\n  );\n  return path;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  InstrumentationModuleDefinition,\n  InstrumentationModuleFile,\n} from './types';\n\nexport class InstrumentationNodeModuleDefinition\n  implements InstrumentationModuleDefinition\n{\n  files: InstrumentationModuleFile[];\n  constructor(\n    public name: string,\n    public supportedVersions: string[],\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public patch?: (exports: any, moduleVersion?: string) => any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public unpatch?: (exports: any, moduleVersion?: string) => void,\n    files?: InstrumentationModuleFile[]\n  ) {\n    this.files = files || [];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationModuleFile } from './types';\nimport { normalize } from './platform/index';\n\nexport class InstrumentationNodeModuleFile\n  implements InstrumentationModuleFile\n{\n  public name: string;\n  constructor(\n    name: string,\n    public supportedVersions: string[],\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public patch: (moduleExports: any, moduleVersion?: string) => any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public unpatch: (moduleExports?: any, moduleVersion?: string) => void\n  ) {\n    this.name = normalize(name);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from './types';\n\n/**\n * function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport function safeExecuteInTheMiddle<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): T {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n\n/**\n * Async function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport async function safeExecuteInTheMiddleAsync<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): Promise<T> {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = await execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n"],
  "mappings": "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",
  "names": ["shimmer", "wrap", "massWrap", "unwrap", "massUnwrap", "SeverityNumber", "NoopLogger", "NoopLoggerProvider", "ProxyLogger", "ProxyLoggerProvider", "LogsAPI", "InstrumentationAbstract", "InstrumentationBase", "InstrumentationNodeModuleDefinition", "InstrumentationNodeModuleFile"]
}
