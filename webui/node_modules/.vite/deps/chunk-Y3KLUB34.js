import {
  SDK_INFO,
  getEnv
} from "./chunk-EUE7Z7AQ.js";
import {
  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,
  SEMRESATTRS_PROCESS_RUNTIME_NAME,
  SEMRESATTRS_PROCESS_RUNTIME_VERSION,
  SEMRESATTRS_SERVICE_NAME,
  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,
  SEMRESATTRS_TELEMETRY_SDK_NAME,
  SEMRESATTRS_TELEMETRY_SDK_VERSION
} from "./chunk-KGIZC2BO.js";
import {
  diag
} from "./chunk-EOA2FUOG.js";

// node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js
function defaultServiceName() {
  return "unknown_service";
}

// node_modules/@opentelemetry/resources/build/esm/Resource.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var Resource = function() {
  function Resource2(attributes, asyncAttributesPromise) {
    var _this = this;
    var _a;
    this._attributes = attributes;
    this.asyncAttributesPending = asyncAttributesPromise != null;
    this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};
    this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function(asyncAttributes) {
      _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);
      _this.asyncAttributesPending = false;
      return asyncAttributes;
    }, function(err) {
      diag.debug("a resource's async attributes promise rejected: %s", err);
      _this.asyncAttributesPending = false;
      return {};
    });
  }
  Resource2.empty = function() {
    return Resource2.EMPTY;
  };
  Resource2.default = function() {
    var _a;
    return new Resource2((_a = {}, _a[SEMRESATTRS_SERVICE_NAME] = defaultServiceName(), _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE], _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME], _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION], _a));
  };
  Object.defineProperty(Resource2.prototype, "attributes", {
    get: function() {
      var _a;
      if (this.asyncAttributesPending) {
        diag.error("Accessing resource attributes before async attributes settled");
      }
      return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};
    },
    enumerable: false,
    configurable: true
  });
  Resource2.prototype.waitForAsyncAttributes = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.asyncAttributesPending)
              return [3, 2];
            return [4, this._asyncAttributesPromise];
          case 1:
            _a.sent();
            _a.label = 2;
          case 2:
            return [2];
        }
      });
    });
  };
  Resource2.prototype.merge = function(other) {
    var _this = this;
    var _a;
    if (!other)
      return this;
    var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), (_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes);
    if (!this._asyncAttributesPromise && !other._asyncAttributesPromise) {
      return new Resource2(mergedSyncAttributes);
    }
    var mergedAttributesPromise = Promise.all([
      this._asyncAttributesPromise,
      other._asyncAttributesPromise
    ]).then(function(_a2) {
      var _b;
      var _c = __read(_a2, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];
      return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), (_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes), otherAsyncAttributes);
    });
    return new Resource2(mergedSyncAttributes, mergedAttributesPromise);
  };
  Resource2.EMPTY = new Resource2({});
  return Resource2;
}();

// node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetectorSync.js
var NoopDetectorSync = function() {
  function NoopDetectorSync2() {
  }
  NoopDetectorSync2.prototype.detect = function() {
    return new Resource({});
  };
  return NoopDetectorSync2;
}();
var noopDetectorSync = new NoopDetectorSync();

// node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetector.js
var NoopDetector = function() {
  function NoopDetector2() {
  }
  NoopDetector2.prototype.detect = function() {
    return Promise.resolve(noopDetectorSync.detect());
  };
  return NoopDetector2;
}();
var noopDetector = new NoopDetector();

// node_modules/@opentelemetry/resources/build/esm/detectors/platform/browser/HostDetector.js
var hostDetector = noopDetector;

// node_modules/@opentelemetry/resources/build/esm/detectors/platform/browser/HostDetectorSync.js
var hostDetectorSync = noopDetectorSync;

// node_modules/@opentelemetry/resources/build/esm/detectors/platform/browser/OSDetector.js
var osDetector = noopDetector;

// node_modules/@opentelemetry/resources/build/esm/detectors/platform/browser/OSDetectorSync.js
var osDetectorSync = noopDetectorSync;

// node_modules/@opentelemetry/resources/build/esm/detectors/platform/browser/ProcessDetector.js
var processDetector = noopDetector;

// node_modules/@opentelemetry/resources/build/esm/detectors/platform/browser/ProcessDetectorSync.js
var processDetectorSync = noopDetector;

// node_modules/@opentelemetry/resources/build/esm/detectors/platform/browser/ServiceInstanceIdDetectorSync.js
var serviceInstanceIdDetectorSync = noopDetectorSync;

// node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetectorSync.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var BrowserDetectorSync = function() {
  function BrowserDetectorSync2() {
  }
  BrowserDetectorSync2.prototype.detect = function(config) {
    var _a;
    var _b, _c, _d;
    var isBrowser = typeof navigator !== "undefined" && ((_c = (_b = global.process) === null || _b === void 0 ? void 0 : _b.versions) === null || _c === void 0 ? void 0 : _c.node) === void 0 && ((_d = global.Bun) === null || _d === void 0 ? void 0 : _d.version) === void 0;
    if (!isBrowser) {
      return Resource.empty();
    }
    var browserResource = (_a = {}, _a[SEMRESATTRS_PROCESS_RUNTIME_NAME] = "browser", _a[SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION] = "Web Browser", _a[SEMRESATTRS_PROCESS_RUNTIME_VERSION] = navigator.userAgent, _a);
    return this._getResourceAttributes(browserResource, config);
  };
  BrowserDetectorSync2.prototype._getResourceAttributes = function(browserResource, _config) {
    if (browserResource[SEMRESATTRS_PROCESS_RUNTIME_VERSION] === "") {
      diag.debug("BrowserDetector failed: Unable to find required browser resources. ");
      return Resource.empty();
    } else {
      return new Resource(__assign2({}, browserResource));
    }
  };
  return BrowserDetectorSync2;
}();
var browserDetectorSync = new BrowserDetectorSync();

// node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetector.js
var BrowserDetector = function() {
  function BrowserDetector2() {
  }
  BrowserDetector2.prototype.detect = function(config) {
    return Promise.resolve(browserDetectorSync.detect(config));
  };
  return BrowserDetector2;
}();
var browserDetector = new BrowserDetector();

// node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetectorSync.js
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var EnvDetectorSync = function() {
  function EnvDetectorSync2() {
    this._MAX_LENGTH = 255;
    this._COMMA_SEPARATOR = ",";
    this._LABEL_KEY_VALUE_SPLITTER = "=";
    this._ERROR_MESSAGE_INVALID_CHARS = "should be a ASCII string with a length greater than 0 and not exceed " + this._MAX_LENGTH + " characters.";
    this._ERROR_MESSAGE_INVALID_VALUE = "should be a ASCII string with a length not exceed " + this._MAX_LENGTH + " characters.";
  }
  EnvDetectorSync2.prototype.detect = function(_config) {
    var attributes = {};
    var env = getEnv();
    var rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;
    var serviceName = env.OTEL_SERVICE_NAME;
    if (rawAttributes) {
      try {
        var parsedAttributes = this._parseResourceAttributes(rawAttributes);
        Object.assign(attributes, parsedAttributes);
      } catch (e) {
        diag.debug("EnvDetector failed: " + e.message);
      }
    }
    if (serviceName) {
      attributes[SEMRESATTRS_SERVICE_NAME] = serviceName;
    }
    return new Resource(attributes);
  };
  EnvDetectorSync2.prototype._parseResourceAttributes = function(rawEnvAttributes) {
    var e_1, _a;
    if (!rawEnvAttributes)
      return {};
    var attributes = {};
    var rawAttributes = rawEnvAttributes.split(this._COMMA_SEPARATOR, -1);
    try {
      for (var rawAttributes_1 = __values(rawAttributes), rawAttributes_1_1 = rawAttributes_1.next(); !rawAttributes_1_1.done; rawAttributes_1_1 = rawAttributes_1.next()) {
        var rawAttribute = rawAttributes_1_1.value;
        var keyValuePair = rawAttribute.split(this._LABEL_KEY_VALUE_SPLITTER, -1);
        if (keyValuePair.length !== 2) {
          continue;
        }
        var _b = __read2(keyValuePair, 2), key = _b[0], value = _b[1];
        key = key.trim();
        value = value.trim().split(/^"|"$/).join("");
        if (!this._isValidAndNotEmpty(key)) {
          throw new Error("Attribute key " + this._ERROR_MESSAGE_INVALID_CHARS);
        }
        if (!this._isValid(value)) {
          throw new Error("Attribute value " + this._ERROR_MESSAGE_INVALID_VALUE);
        }
        attributes[key] = decodeURIComponent(value);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (rawAttributes_1_1 && !rawAttributes_1_1.done && (_a = rawAttributes_1.return))
          _a.call(rawAttributes_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return attributes;
  };
  EnvDetectorSync2.prototype._isValid = function(name) {
    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);
  };
  EnvDetectorSync2.prototype._isBaggageOctetString = function(str) {
    for (var i = 0; i < str.length; i++) {
      var ch = str.charCodeAt(i);
      if (ch < 33 || ch === 44 || ch === 59 || ch === 92 || ch > 126) {
        return false;
      }
    }
    return true;
  };
  EnvDetectorSync2.prototype._isValidAndNotEmpty = function(str) {
    return str.length > 0 && this._isValid(str);
  };
  return EnvDetectorSync2;
}();
var envDetectorSync = new EnvDetectorSync();

// node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js
var EnvDetector = function() {
  function EnvDetector2() {
  }
  EnvDetector2.prototype.detect = function(config) {
    return Promise.resolve(envDetectorSync.detect(config));
  };
  return EnvDetector2;
}();
var envDetector = new EnvDetector();

// node_modules/@opentelemetry/resources/build/esm/utils.js
var isPromiseLike = function(val) {
  return val !== null && typeof val === "object" && typeof val.then === "function";
};

// node_modules/@opentelemetry/resources/build/esm/detect-resources.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var detectResources = function(config) {
  if (config === void 0) {
    config = {};
  }
  return __awaiter2(void 0, void 0, void 0, function() {
    var resources;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, Promise.all((config.detectors || []).map(function(d) {
            return __awaiter2(void 0, void 0, void 0, function() {
              var resource, e_1;
              return __generator2(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    _a2.trys.push([0, 2, , 3]);
                    return [4, d.detect(config)];
                  case 1:
                    resource = _a2.sent();
                    diag.debug(d.constructor.name + " found resource.", resource);
                    return [2, resource];
                  case 2:
                    e_1 = _a2.sent();
                    diag.debug(d.constructor.name + " failed: " + e_1.message);
                    return [2, Resource.empty()];
                  case 3:
                    return [2];
                }
              });
            });
          }))];
        case 1:
          resources = _a.sent();
          logResources(resources);
          return [2, resources.reduce(function(acc, resource) {
            return acc.merge(resource);
          }, Resource.empty())];
      }
    });
  });
};
var detectResourcesSync = function(config) {
  var _a;
  if (config === void 0) {
    config = {};
  }
  var resources = ((_a = config.detectors) !== null && _a !== void 0 ? _a : []).map(function(d) {
    try {
      var resourceOrPromise_1 = d.detect(config);
      var resource_1;
      if (isPromiseLike(resourceOrPromise_1)) {
        var createPromise = function() {
          return __awaiter2(void 0, void 0, void 0, function() {
            var resolvedResource;
            var _a2;
            return __generator2(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, resourceOrPromise_1];
                case 1:
                  resolvedResource = _b.sent();
                  return [4, (_a2 = resolvedResource.waitForAsyncAttributes) === null || _a2 === void 0 ? void 0 : _a2.call(resolvedResource)];
                case 2:
                  _b.sent();
                  return [2, resolvedResource.attributes];
              }
            });
          });
        };
        resource_1 = new Resource({}, createPromise());
      } else {
        resource_1 = resourceOrPromise_1;
      }
      if (resource_1.waitForAsyncAttributes) {
        void resource_1.waitForAsyncAttributes().then(function() {
          return diag.debug(d.constructor.name + " found resource.", resource_1);
        });
      } else {
        diag.debug(d.constructor.name + " found resource.", resource_1);
      }
      return resource_1;
    } catch (e) {
      diag.error(d.constructor.name + " failed: " + e.message);
      return Resource.empty();
    }
  });
  var mergedResources = resources.reduce(function(acc, resource) {
    return acc.merge(resource);
  }, Resource.empty());
  if (mergedResources.waitForAsyncAttributes) {
    void mergedResources.waitForAsyncAttributes().then(function() {
      logResources(resources);
    });
  }
  return mergedResources;
};
var logResources = function(resources) {
  resources.forEach(function(resource) {
    if (Object.keys(resource.attributes).length > 0) {
      var resourceDebugString = JSON.stringify(resource.attributes, null, 4);
      diag.verbose(resourceDebugString);
    }
  });
};

export {
  defaultServiceName,
  Resource,
  hostDetector,
  hostDetectorSync,
  osDetector,
  osDetectorSync,
  processDetector,
  processDetectorSync,
  serviceInstanceIdDetectorSync,
  browserDetectorSync,
  browserDetector,
  envDetectorSync,
  envDetector,
  detectResources,
  detectResourcesSync
};
//# sourceMappingURL=chunk-Y3KLUB34.js.map
