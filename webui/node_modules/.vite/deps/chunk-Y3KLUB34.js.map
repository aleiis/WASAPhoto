{
  "version": 3,
  "sources": ["../../@opentelemetry/resources/src/platform/browser/default-service-name.ts", "../../@opentelemetry/resources/src/Resource.ts", "../../@opentelemetry/resources/src/detectors/NoopDetectorSync.ts", "../../@opentelemetry/resources/src/detectors/NoopDetector.ts", "../../@opentelemetry/resources/src/detectors/platform/browser/HostDetector.ts", "../../@opentelemetry/resources/src/detectors/platform/browser/HostDetectorSync.ts", "../../@opentelemetry/resources/src/detectors/platform/browser/OSDetector.ts", "../../@opentelemetry/resources/src/detectors/platform/browser/OSDetectorSync.ts", "../../@opentelemetry/resources/src/detectors/platform/browser/ProcessDetector.ts", "../../@opentelemetry/resources/src/detectors/platform/browser/ProcessDetectorSync.ts", "../../@opentelemetry/resources/src/detectors/platform/browser/ServiceInstanceIdDetectorSync.ts", "../../@opentelemetry/resources/src/detectors/BrowserDetectorSync.ts", "../../@opentelemetry/resources/src/detectors/BrowserDetector.ts", "../../@opentelemetry/resources/src/detectors/EnvDetectorSync.ts", "../../@opentelemetry/resources/src/detectors/EnvDetector.ts", "../../@opentelemetry/resources/src/utils.ts", "../../@opentelemetry/resources/src/detect-resources.ts"],
  "sourcesContent": ["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return 'unknown_service';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SEMRESATTRS_SERVICE_NAME]: defaultServiceName(),\n      [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n      [SEMRESATTRS_TELEMETRY_SDK_NAME]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n      [SEMRESATTRS_TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from '../Resource';\nimport { DetectorSync } from '../types';\nimport { IResource } from '../IResource';\n\nexport class NoopDetectorSync implements DetectorSync {\n  detect(): IResource {\n    return new Resource({});\n  }\n}\n\nexport const noopDetectorSync = new NoopDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { IResource } from '../IResource';\nimport { noopDetectorSync } from './NoopDetectorSync';\n\nexport class NoopDetector implements Detector {\n  detect(): Promise<IResource> {\n    return Promise.resolve(noopDetectorSync.detect());\n  }\n}\n\nexport const noopDetector = new NoopDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { noopDetector } from '../../NoopDetector';\n\nexport const hostDetector = noopDetector;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { noopDetectorSync } from '../../NoopDetectorSync';\n\nexport const hostDetectorSync = noopDetectorSync;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { noopDetector } from '../../NoopDetector';\n\nexport const osDetector = noopDetector;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { noopDetectorSync } from '../../NoopDetectorSync';\n\nexport const osDetectorSync = noopDetectorSync;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { noopDetector } from '../../NoopDetector';\n\nexport const processDetector = noopDetector;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { noopDetector } from '../../NoopDetector';\n\nexport const processDetectorSync = noopDetector;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { noopDetectorSync } from '../../NoopDetectorSync';\n\n/**\n * @experimental\n */\nexport const serviceInstanceIdDetectorSync = noopDetectorSync;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { diag } from '@opentelemetry/api';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { Resource } from '../Resource';\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nclass BrowserDetectorSync implements DetectorSync {\n  detect(config?: ResourceDetectionConfig): IResource {\n    const isBrowser =\n      typeof navigator !== 'undefined' &&\n      global.process?.versions?.node === undefined && // Node.js v21 adds `navigator`\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore don't have Bun types\n      global.Bun?.version === undefined; // Bun (bun.sh) defines `navigator`\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    const browserResource: ResourceAttributes = {\n      [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION]: 'Web Browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_VERSION]: navigator.userAgent,\n    };\n    return this._getResourceAttributes(browserResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    browserResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (browserResource[SEMRESATTRS_PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug(\n        'BrowserDetector failed: Unable to find required browser resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...browserResource,\n      });\n    }\n  }\n}\n\nexport const browserDetectorSync = new BrowserDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IResource } from '../IResource';\nimport { ResourceDetectionConfig } from '../config';\nimport { Detector } from '../types';\nimport { browserDetectorSync } from './BrowserDetectorSync';\n\n/**\n * BrowserDetector will be used to detect the resources related to browser.\n */\nclass BrowserDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(browserDetectorSync.detect(config));\n  }\n}\n\nexport const browserDetector = new BrowserDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetectorSync implements DetectorSync {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SEMRESATTRS_SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespace, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-separated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split(/^\"|\"$/).join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = decodeURIComponent(value);\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }\n\n  // https://www.w3.org/TR/baggage/#definition\n  private _isBaggageOctetString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetectorSync = new EnvDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { envDetectorSync } from './EnvDetectorSync';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(envDetectorSync.detect(config));\n  }\n}\n\nexport const envDetector = new EnvDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isPromiseLike = <R>(val: any): val is PromiseLike<R> => {\n  return (\n    val !== null && typeof val === 'object' && typeof val.then === 'function'\n  );\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from './Resource';\nimport { ResourceDetectionConfig } from './config';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\nimport { Detector, DetectorSync } from './types';\nimport { IResource } from './IResource';\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nexport const detectResources = async (\n  config: ResourceDetectionConfig = {}\n): Promise<IResource> => {\n  const resources: IResource[] = await Promise.all(\n    (config.detectors || []).map(async d => {\n      try {\n        const resource = await d.detect(config);\n        diag.debug(`${d.constructor.name} found resource.`, resource);\n        return resource;\n      } catch (e) {\n        diag.debug(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    })\n  );\n\n  // Future check if verbose logging is enabled issue #1903\n  logResources(resources);\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n};\n\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResourcesSync = (\n  config: ResourceDetectionConfig = {}\n): IResource => {\n  const resources: IResource[] = (config.detectors ?? []).map(\n    (d: Detector | DetectorSync) => {\n      try {\n        const resourceOrPromise = d.detect(config);\n        let resource: IResource;\n        if (isPromiseLike<Resource>(resourceOrPromise)) {\n          const createPromise = async () => {\n            const resolvedResource = await resourceOrPromise;\n            await resolvedResource.waitForAsyncAttributes?.();\n            return resolvedResource.attributes;\n          };\n          resource = new Resource({}, createPromise());\n        } else {\n          resource = resourceOrPromise as IResource;\n        }\n\n        if (resource.waitForAsyncAttributes) {\n          void resource\n            .waitForAsyncAttributes()\n            .then(() =>\n              diag.debug(`${d.constructor.name} found resource.`, resource)\n            );\n        } else {\n          diag.debug(`${d.constructor.name} found resource.`, resource);\n        }\n\n        return resource;\n      } catch (e) {\n        diag.error(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    }\n  );\n\n  const mergedResources = resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(() => {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n\n  return mergedResources;\n};\n\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nconst logResources = (resources: Array<IResource>) => {\n  resources.forEach(resource => {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      const resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAgBM,SAAU,qBAAkB;AAChC,SAAO;AACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcA,IAAA,WAAA,WAAA;AAoCE,WAAAA,UAME,YACA,wBAAoD;AAPtD,QAAA,QAAA;;AASE,SAAK,cAAc;AACnB,SAAK,yBAAyB,0BAA0B;AACxD,SAAK,mBAAkB,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA;AAC3C,SAAK,0BAA0B,2BAAsB,QAAtB,2BAAsB,SAAA,SAAtB,uBAAwB,KACrD,SAAA,iBAAe;AACb,YAAK,cAAc,OAAO,OAAO,CAAA,GAAI,MAAK,aAAa,eAAe;AACtE,YAAK,yBAAyB;AAC9B,aAAO;IACT,GACA,SAAA,KAAG;AACD,WAAK,MAAM,sDAAsD,GAAG;AACpE,YAAK,yBAAyB;AAC9B,aAAO,CAAA;IACT,CAAC;EAEL;AA3CO,EAAAA,UAAA,QAAP,WAAA;AACE,WAAOA,UAAS;EAClB;AAKO,EAAAA,UAAA,UAAP,WAAA;;AACE,WAAO,IAAIA,WAAQ,KAAA,CAAA,GACjB,GAAC,4BAA2B,mBAAkB,GAC9C,GAAC,sCACC,SAAS,qCACX,GAAC,kCACC,SAAS,iCACX,GAAC,qCACC,SAAS;EAEf;AA4BA,SAAA,eAAIA,UAAA,WAAA,cAAU;SAAd,WAAA;;AACE,UAAI,KAAK,wBAAwB;AAC/B,aAAK,MACH,+DAA+D;;AAInE,cAAO,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA;IAC7B;;;;AAOM,EAAAA,UAAA,UAAA,yBAAN,WAAA;;;;;iBACM,KAAK;AAAL,qBAAA,CAAA,GAAA,CAAA;AACF,mBAAA,CAAA,GAAM,KAAK,uBAAuB;;AAAlC,eAAA,KAAA;;;;;;;;AAYJ,EAAAA,UAAA,UAAA,QAAA,SAAM,OAAuB;AAA7B,QAAA,QAAA;;AACE,QAAI,CAAC;AAAO,aAAO;AAGnB,QAAM,uBAAoB,SAAA,SAAA,CAAA,GACrB,KAAK,eAAe,IAEnB,KAAC,MAAmB,qBAAe,QAAA,OAAA,SAAA,KAAI,MAAM,UAAW;AAG9D,QACE,CAAC,KAAK,2BACN,CAAE,MAAmB,yBACrB;AACA,aAAO,IAAIA,UAAS,oBAAoB;;AAG1C,QAAM,0BAA0B,QAAQ,IAAI;MAC1C,KAAK;MACJ,MAAmB;KACrB,EAAE,KAAK,SAACC,KAA2C;;UAA3C,KAAA,OAAAA,KAAA,CAAA,GAAC,sBAAmB,GAAA,IAAE,uBAAoB,GAAA;AACjD,aAAA,SAAA,SAAA,SAAA,SAAA,CAAA,GACK,MAAK,eAAe,GACpB,mBAAmB,IAElB,KAAC,MAAmB,qBAAe,QAAA,OAAA,SAAA,KAAI,MAAM,UAAW,GACzD,oBAAoB;IAE3B,CAAC;AAED,WAAO,IAAID,UAAS,sBAAsB,uBAAuB;EACnE;AAzHgB,EAAAA,UAAA,QAAQ,IAAIA,UAAS,CAAA,CAAE;AA0HzC,SAAAA;EA3HA;;;ACZA,IAAA,mBAAA,WAAA;AAAA,WAAAE,oBAAA;EAIA;AAHE,EAAAA,kBAAA,UAAA,SAAA,WAAA;AACE,WAAO,IAAI,SAAS,CAAA,CAAE;EACxB;AACF,SAAAA;AAAA,EAJA;AAMO,IAAM,mBAAmB,IAAI,iBAAgB;;;ACNpD,IAAA,eAAA,WAAA;AAAA,WAAAC,gBAAA;EAIA;AAHE,EAAAA,cAAA,UAAA,SAAA,WAAA;AACE,WAAO,QAAQ,QAAQ,iBAAiB,OAAM,CAAE;EAClD;AACF,SAAAA;AAAA,EAJA;AAMO,IAAM,eAAe,IAAI,aAAY;;;ACRrC,IAAM,eAAe;;;ACArB,IAAM,mBAAmB;;;ACAzB,IAAM,aAAa;;;ACAnB,IAAM,iBAAiB;;;ACAvB,IAAM,kBAAkB;;;ACAxB,IAAM,sBAAsB;;;ACG5B,IAAM,gCAAgC;;;;;;;;;;;;;;;ACS7C,IAAA,sBAAA,WAAA;AAAA,WAAAC,uBAAA;EAwCA;AAvCE,EAAAA,qBAAA,UAAA,SAAA,SAAO,QAAgC;;;AACrC,QAAM,YACJ,OAAO,cAAc,iBACrB,MAAA,KAAA,OAAO,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS,YAGnC,KAAA,OAAO,SAAG,QAAA,OAAA,SAAA,SAAA,GAAE,aAAY;AAC1B,QAAI,CAAC,WAAW;AACd,aAAO,SAAS,MAAK;;AAEvB,QAAM,mBAAe,KAAA,CAAA,GACnB,GAAC,oCAAmC,WACpC,GAAC,2CAA0C,eAC3C,GAAC,uCAAsC,UAAU;AAEnD,WAAO,KAAK,uBAAuB,iBAAiB,MAAM;EAC5D;AAQQ,EAAAA,qBAAA,UAAA,yBAAR,SACE,iBACA,SAAiC;AAEjC,QAAI,gBAAgB,yCAAyC,IAAI;AAC/D,WAAK,MACH,qEAAqE;AAEvE,aAAO,SAAS,MAAK;WAChB;AACL,aAAO,IAAI,SAAQC,UAAA,CAAA,GACd,eAAe,CAAA;;EAGxB;AACF,SAAAD;AAAA,EAxCA;AA0CO,IAAM,sBAAsB,IAAI,oBAAmB;;;AChD1D,IAAA,kBAAA,WAAA;AAAA,WAAAE,mBAAA;EAIA;AAHE,EAAAA,iBAAA,UAAA,SAAA,SAAO,QAAgC;AACrC,WAAO,QAAQ,QAAQ,oBAAoB,OAAO,MAAM,CAAC;EAC3D;AACF,SAAAA;AAAA,EAJA;AAMO,IAAM,kBAAkB,IAAI,gBAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFlD,IAAA,kBAAA,WAAA;AAAA,WAAAC,mBAAA;AAEmB,SAAA,cAAc;AAGd,SAAA,mBAAmB;AAGnB,SAAA,4BAA4B;AAE5B,SAAA,+BACf,0EACA,KAAK,cACL;AAEe,SAAA,+BACf,uDACA,KAAK,cACL;EA+GJ;AAtGE,EAAAA,iBAAA,UAAA,SAAA,SAAO,SAAiC;AACtC,QAAM,aAAiC,CAAA;AACvC,QAAM,MAAM,OAAM;AAElB,QAAM,gBAAgB,IAAI;AAC1B,QAAM,cAAc,IAAI;AAExB,QAAI,eAAe;AACjB,UAAI;AACF,YAAM,mBAAmB,KAAK,yBAAyB,aAAa;AACpE,eAAO,OAAO,YAAY,gBAAgB;eACnC,GAAP;AACA,aAAK,MAAM,yBAAuB,EAAE,OAAS;;;AAIjD,QAAI,aAAa;AACf,iBAAW,4BAA4B;;AAGzC,WAAO,IAAI,SAAS,UAAU;EAChC;AAgBQ,EAAAA,iBAAA,UAAA,2BAAR,SACE,kBAAyB;;AAEzB,QAAI,CAAC;AAAkB,aAAO,CAAA;AAE9B,QAAM,aAAiC,CAAA;AACvC,QAAM,gBAA0B,iBAAiB,MAC/C,KAAK,kBACL,EAAE;;AAEJ,eAA2B,kBAAA,SAAA,aAAa,GAAA,oBAAA,gBAAA,KAAA,GAAA,CAAA,kBAAA,MAAA,oBAAA,gBAAA,KAAA,GAAE;AAArC,YAAM,eAAY,kBAAA;AACrB,YAAM,eAAyB,aAAa,MAC1C,KAAK,2BACL,EAAE;AAEJ,YAAI,aAAa,WAAW,GAAG;AAC7B;;AAEE,YAAA,KAAAC,QAAe,cAAY,CAAA,GAA1B,MAAG,GAAA,IAAE,QAAK,GAAA;AAEf,cAAM,IAAI,KAAI;AACd,gBAAQ,MAAM,KAAI,EAAG,MAAM,OAAO,EAAE,KAAK,EAAE;AAC3C,YAAI,CAAC,KAAK,oBAAoB,GAAG,GAAG;AAClC,gBAAM,IAAI,MAAM,mBAAiB,KAAK,4BAA8B;;AAEtE,YAAI,CAAC,KAAK,SAAS,KAAK,GAAG;AACzB,gBAAM,IAAI,MAAM,qBAAmB,KAAK,4BAA8B;;AAExE,mBAAW,OAAO,mBAAmB,KAAK;;;;;;;;;;;;;AAE5C,WAAO;EACT;AASQ,EAAAD,iBAAA,UAAA,WAAR,SAAiB,MAAY;AAC3B,WAAO,KAAK,UAAU,KAAK,eAAe,KAAK,sBAAsB,IAAI;EAC3E;AAGQ,EAAAA,iBAAA,UAAA,wBAAR,SAA8B,KAAW;AACvC,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,UAAM,KAAK,IAAI,WAAW,CAAC;AAC3B,UAAI,KAAK,MAAQ,OAAO,MAAQ,OAAO,MAAQ,OAAO,MAAQ,KAAK,KAAM;AACvE,eAAO;;;AAGX,WAAO;EACT;AASQ,EAAAA,iBAAA,UAAA,sBAAR,SAA4B,KAAW;AACrC,WAAO,IAAI,SAAS,KAAK,KAAK,SAAS,GAAG;EAC5C;AACF,SAAAA;AAAA,EAjIA;AAmIO,IAAM,kBAAkB,IAAI,gBAAe;;;ACtIlD,IAAA,cAAA,WAAA;AAAA,WAAAE,eAAA;EAWA;AAHE,EAAAA,aAAA,UAAA,SAAA,SAAO,QAAgC;AACrC,WAAO,QAAQ,QAAQ,gBAAgB,OAAO,MAAM,CAAC;EACvD;AACF,SAAAA;AAAA,EAXA;AAaO,IAAM,cAAc,IAAI,YAAW;;;ACtBnC,IAAM,gBAAgB,SAAI,KAAQ;AACvC,SACE,QAAQ,QAAQ,OAAO,QAAQ,YAAY,OAAO,IAAI,SAAS;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWO,IAAM,kBAAkB,SAC7B,QAAoC;AAApC,MAAA,WAAA,QAAA;AAAA,aAAA,CAAA;EAAoC;;;;;;AAEL,iBAAA,CAAA,GAAM,QAAQ,KAC1C,OAAO,aAAa,CAAA,GAAI,IAAI,SAAM,GAAC;AAAA,mBAAAC,WAAA,QAAA,QAAA,QAAA,WAAA;;;;;;AAEf,2BAAA,CAAA,GAAM,EAAE,OAAO,MAAM,CAAC;;AAAjC,+BAAWC,IAAA,KAAA;AACjB,yBAAK,MAAS,EAAE,YAAY,OAAI,oBAAoB,QAAQ;AAC5D,2BAAA,CAAA,GAAO,QAAQ;;;AAEf,yBAAK,MAAS,EAAE,YAAY,OAAI,cAAY,IAAE,OAAS;AACvD,2BAAA,CAAA,GAAO,SAAS,MAAK,CAAE;;;;;;WAE1B,CAAC,CACH;;AAXK,sBAAyB,GAAA,KAAA;AAc/B,uBAAa,SAAS;AAEtB,iBAAA,CAAA,GAAO,UAAU,OACf,SAAC,KAAK,UAAQ;AAAK,mBAAA,IAAI,MAAM,QAAQ;UAAlB,GACnB,SAAS,MAAK,CAAE,CACjB;;;;;AAQI,IAAM,sBAAsB,SACjC,QAAoC;;AAApC,MAAA,WAAA,QAAA;AAAA,aAAA,CAAA;EAAoC;AAEpC,MAAM,cAA0B,KAAA,OAAO,eAAS,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI,IACtD,SAAC,GAA0B;AACzB,QAAI;AACF,UAAM,sBAAoB,EAAE,OAAO,MAAM;AACzC,UAAI;AACJ,UAAI,cAAwB,mBAAiB,GAAG;AAC9C,YAAM,gBAAgB,WAAA;AAAA,iBAAAD,WAAA,QAAA,QAAA,QAAA,WAAA;;;;;;AACK,yBAAA,CAAA,GAAM,mBAAiB;;AAA1C,qCAAmB,GAAA,KAAA;AACzB,yBAAA,CAAA,IAAMC,MAAA,iBAAiB,4BAAsB,QAAAA,QAAA,SAAA,SAAAA,IAAA,KAAvC,gBAAgB,CAA2B;;AAAjD,qBAAA,KAAA;AACA,yBAAA,CAAA,GAAO,iBAAiB,UAAU;;;;;AAEpC,qBAAW,IAAI,SAAS,CAAA,GAAI,cAAa,CAAE;aACtC;AACL,qBAAW;;AAGb,UAAI,WAAS,wBAAwB;AACnC,aAAK,WACF,uBAAsB,EACtB,KAAK,WAAA;AACJ,iBAAA,KAAK,MAAS,EAAE,YAAY,OAAI,oBAAoB,UAAQ;QAA5D,CAA6D;aAE5D;AACL,aAAK,MAAS,EAAE,YAAY,OAAI,oBAAoB,UAAQ;;AAG9D,aAAO;aACA,GAAP;AACA,WAAK,MAAS,EAAE,YAAY,OAAI,cAAY,EAAE,OAAS;AACvD,aAAO,SAAS,MAAK;;EAEzB,CAAC;AAGH,MAAM,kBAAkB,UAAU,OAChC,SAAC,KAAK,UAAQ;AAAK,WAAA,IAAI,MAAM,QAAQ;EAAlB,GACnB,SAAS,MAAK,CAAE;AAGlB,MAAI,gBAAgB,wBAAwB;AAC1C,SAAK,gBAAgB,uBAAsB,EAAG,KAAK,WAAA;AAEjD,mBAAa,SAAS;IACxB,CAAC;;AAGH,SAAO;AACT;AAOA,IAAM,eAAe,SAAC,WAA2B;AAC/C,YAAU,QAAQ,SAAA,UAAQ;AAExB,QAAI,OAAO,KAAK,SAAS,UAAU,EAAE,SAAS,GAAG;AAC/C,UAAM,sBAAsB,KAAK,UAAU,SAAS,YAAY,MAAM,CAAC;AACvE,WAAK,QAAQ,mBAAmB;;EAEpC,CAAC;AACH;",
  "names": ["Resource", "_a", "NoopDetectorSync", "NoopDetector", "BrowserDetectorSync", "__assign", "BrowserDetector", "EnvDetectorSync", "__read", "EnvDetector", "__awaiter", "_a"]
}
